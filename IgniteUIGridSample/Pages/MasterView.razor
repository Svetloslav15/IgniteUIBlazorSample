@page "/"
@using IgniteUIGridSample.Models;
@inject Northwind.IDataSourceService northwindService
@inject IJSRuntime JS

<div class="row-layout master-view-container">
    
    @if (employees.Count > 0 && countries.Count > 0)
    {
        <IgbGrid 
            Height="800px" 
            Data="employees" 
            PrimaryKey="EmployeeID" 
            DisplayDensity="DisplayDensity.Cosy" 
            class="ig-typography grid" 
            master-view-scope>
            <IgbColumn 
                HeaderTemplateScript="firstNameHeaderTemplate" 
                Field="EmployeeID" 
                DataType="GridColumnDataType.Number" 
                Header="employeeID"/>
            <IgbColumn 
                Field="FirstName" 
                DataType="GridColumnDataType.String" 
                Header="FirstName" />
            <IgbColumn Field="AvatarUrl"
                   Header="Avatar"
                   BodyTemplate="ImageCellTemplate"
                   DataType="GridColumnDataType.Image" />
            <IgbColumn Header="Country" BodyTemplate="CountriesTemplate" />
            <IgbColumn Header="State">
                <BodyTemplate> 
                    <IgbMultiColumnComboBox
                        DataSource="states"
                        ValueChanged="HandleSelectState"
                        Fields="displayFields"
                        TextField="Name"
                        Placeholder="Choose a state" />
                </BodyTemplate>
            </IgbColumn>
            
            <IgbColumn
                Header="City">
                <BodyTemplate>
                    <IgbMultiColumnComboBox DataSource="cities"
                        Fields="displayFields"
                        TextField="Name"
                        Placeholder="Choose a city" />
                </BodyTemplate>
                </IgbColumn>
        </IgbGrid>
    }
</div>

@code {
    private static List<Employee> employees = new List<Employee>();
    private static List<Country> countries = new List<Country>();
    private static List<State> states = new List<State>();
    private static string[] displayFields = new string[] { "Name" };
    private static string selectedState = "";
    private static List<City> cities = new List<City>();

    protected override async Task OnInitializedAsync()
    {
        employees = await this.northwindService.GetEmployees() ?? employees;
        countries = await this.northwindService.GetCountries() ?? countries;
        states = await this.northwindService.GetStates() ?? states;
    }

    public void HandleSelectState(object val)
    {
        selectedState = val.ToString();
        cities = states.FirstOrDefault(state => state.Name == selectedState).Cities
                       .Select(c => new City(){Name = c})
                       .ToList();
    
    }

    public RenderFragment<IgbCellTemplateContext> TestTemplate = (ctx) =>
    {
    return @<span>@selectedState</span>;
        };

    public RenderFragment<IgbCellTemplateContext> ImageCellTemplate = (ctx) =>
    {
        return @<img src=@ctx.Cell.Value style="width: 36%;" />;
    };

    public RenderFragment<IgbCellTemplateContext> StateTemplate = (ctx) =>
    {
        var value = ctx.Cell.Value != null ? ctx.Cell.Value : "State";

        return
            @<IgbDropdown>
                <IgbButton slot="target">@value</IgbButton>
                @foreach (var state in states)
                {
                    <IgbDropdownItem>@state.Name</IgbDropdownItem>
                }
            </IgbDropdown>;
    };

    public RenderFragment<IgbCellTemplateContext> CountriesTemplate = (ctx) =>
    {
        return
            @<IgbDropdown>
                <IgbButton slot="target">Country</IgbButton>
                @foreach (var country in countries)
                {
                    <IgbDropdownItem>@country.Name</IgbDropdownItem>
                }
            </IgbDropdown>;
    };
};